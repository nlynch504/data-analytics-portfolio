dir()
dir()
exist_prod <- read.csv("existingproductattributes2017.csv")
exist_prod_workfile <- exist_prod
library(caret)
library(randomForest)
library(e1071)
exist_prod_workfile
View(exist_prod_workfile)
View(exist_prod_workfile)
save.image()
summary(exist_prod_workfile)
str(exist_prod_workfile)
install.packages("corrplot")
install.packages("gbm")
library(caret)
library(randomForest)
library(e1071)
library(corrplot)
library(gbm)
library("gbm", lib.loc="~/R/win-library/3.4")
install.packages("gbm")
library(gbm)
library(caret)
library(randomForest)
library(e1071)
library(corrplot)
dummy_Eprod <- dummyVars(" ~ .", data = exist_prod_workfile)
View(dummy_Eprod)
ready_Data <- data.frame(predict(dummy_Eprod, newdata = exist_prod_workfile))
View(ready_Data)
ready_Data$BestSellersRank <- NULL
corrData <- cor(ready_Data)
corrData
View(corrData)
View(corrData)
corrplot(corrData)
output <- corrData
str(output)
View(corrData)
View(corrData)
write.csv(output, file = "C2.T3.correlation_matrix.csv",row.names = TRUE,col.names = TRUE)
write.csv(output, file = "C2.T3.correlation_matrix.csv", row.names = TRUE, col.names = TRUE)
write.csv(output, file = "C2.T3.correlation_matrix.csv", row.names = TRUE)
help("corrplot")
View(corrData)
View(corrData)
corrData$NegativeServiceReview
View(ready_Data)
corrplot(corrData$NegativeServiceReview)
corrData$NegativeServiceReview
NegativeServiceReview
ready_Data$x5StarReviews <- NULL
ready_Data$x3StarReviews <- NULL
ready_Data$x1StarReviews <- NULL
ready_Data$NegativeServiceReview <- NULL
corrData <- cor(ready_Data)
corplot(corrData)
corrplot(corrData)
Corrdata
CorrData
corrData
save.image()
save.image()
library(caret)
library(randomForest)
library(e1071)
library(corrplot)
library(gbm)
corrData
ready_Data$ProductNum <- NULL
ready_Data
corrplot(corrData)
corrData
ready_Data <- data.frame(predict(dummy_Eprod, newdata = exist_prod_workfile))
set.seed(123)
#linear model
LinearModel <- lm(Volume~., data =ready_data)
ready_Data$BestSellersRank <- NULL
set.seed(123)
#linear model
LinearModel <- lm(Volume~., data =ready_Data)
LinearModel
summary(LinearModel)
trainSize <- createDataPartition(ready_Data$Volume, p = .80, list = FALSE)
training <- ready_Data[trainSize,]
testing <- ready_Data[-trainSize,]
itcontrol <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
svmfit <- train(Volume ~ ., data = training, method = "svmLinear2", trControl = fitcontrol)
rffit <- train(Volume ~ ., data = training, method = "rf", trControl = fitcontrol)
gbmfit <- train(Volume ~ ., data = training, method = "gbm", trControl = fitcontrol)
fitcontrol <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
# svm, rf, abd gbm models
svmfit <- train(Volume ~ ., data = training, method = "svmLinear2", trControl = fitcontrol)
rffit <- train(Volume ~ .,  data = training, method = "rf", trControl = fitcontrol)
gbmfit <- train(Volume ~ ., data = training, method = "gbm", trControl = fitcontrol,verbose = FALSE)
rffit
View(ready_Data)
save.image()
set.seed(123)
#linear model
LinearModel <- lm(Volume~., data = ready_Data)
summary(LinearModel)
#make data paritions
trainSize <- createDataPartition(ready_Data$Volume, p = .80, list = FALSE)
training <- ready_Data[trainSize,]
testing <- ready_Data[-trainSize,]
#fitcontrol
fitcontrol <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
# svm, rf, abd gbm models
svmfit <- train(Volume ~ ., data = training, method = "svmLinear2", trControl = fitcontrol)
rffit <- train(Volume ~ .,  data = training, method = "rf", trControl = fitcontrol)
gbmfit <- train(Volume ~ ., data = training, method = "gbm", trControl = fitcontrol,verbose = FALSE)
warning()
warnings()
warnings(50)
gbmfit
gbmfit <- train(Volume ~ ., data = training, method = "gbm", trControl = fitcontrol,verbose = FALSE)
warnings()
save.image()
library(caret)
library(randomForest)
library(e1071)
library(corrplot)
library(gbm)
set.seed(123)
remove(fitcontrol)
fitcontrol1 <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
rffit <- train(Volume ~ .,  data = training, method = "rf", trControl = fitcontrol1)
rffit
svmfit <- <- train(Volume ~ ., data = training, method = "svmLinear2", trControl = fitcontrol1)
svmfit <- train(Volume ~ ., data = training, method = "svmLinear2", trControl = fitcontrol1)
warnings()
svmfit
rffit <- train(Volume ~ .,  data = training, method = "rf", metric = "Rsquared", trControl = fitcontrol1)
rffit
svmfit <- train(Volume ~ ., data = training, method = "svmLinear2", metric = "Rsquared", trControl = fitcontrol1)
svmfit
gbmfit <- train(Volume ~ ., data = training, method = "gbm", metric = "Rsquared", trControl = fitcontrol1,verbose = FALSE)
warnings()
gbmfit
svmfit_noscale <- train(Volume ~ ., data = training, method = "svmLinear2", metric = "RSquared", trControl = fitcontrol, scale = FALSE)
svmfit_noscale <- train(Volume ~ ., data = training, method = "svmLinear2", metric = "RSquared", trControl = fitcontrol1, scale = FALSE)
svmfit_noscale
fitcontrol2 <- trainControl(method = "repeatedcv", number = 3, repeats = 10)
svmfit_noscale <- train(Volume ~ ., data = training, method = "svmLinear2", metric = "Rsquared", trControl = fitcontrol1, scale = FALSE)
rffit2 <- train(Volume ~ .,  data = training, method = "rf", trControl = fitcontrol1)
rffit2 <- train(Volume ~ .,  data = training, method = "rf", metric = "Rsquared", trControl = fitcontrol2)
rffit2
svmfit2 <- train(Volume ~ ., data = training, method = "svmLinear2", metric = "Rsquared", trControl = fitcontrol2)
svmfit2
gbmfit2 <- train(Volume ~ ., data = training, method = "gbm", metric = "Rsquared", trControl = fitcontrol2,verbose = FALSE)
gbfit2
gbmfit2
ready_Data
trainSize <- createDataPartition(ready_Data$Volume, p = .75, list = FALSE)
training <- ready_Data[trainSize,]
testing <- ready_Data[-trainSize,]
fitcontrol1 <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
#models with 10 folds
rffit <- train(Volume ~ .,  data = training, method = "rf", metric = "Rsquared", trControl = fitcontrol1)
svmfit <- train(Volume ~ ., data = training, method = "svmLinear2", metric = "Rsquared", trControl = fitcontrol1)
gbmfit <- train(Volume ~ ., data = training, method = "gbm", metric = "Rsquared", trControl = fitcontrol1,verbose = FALSE)
rffit
svmfit
gbmfit
svmfit_noscale <- train(Volume ~ ., data = training, method = "svmLinear2", metric = "Rsquared", trControl = fitcontrol1, scale = FALSE)
summary(ready_Data$ProductType.Display)
svmfit_noscale
rffit2 <- train(Volume ~ .,  data = training, method = "rf", metric = "Rsquared", trControl = fitcontrol2)
svmfit2 <- train(Volume ~ ., data = training, method = "svmLinear2", metric = "Rsquared", trControl = fitcontrol2)
gbmfit2 <- train(Volume ~ ., data = training, method = "gbm", metric = "Rsquared", trControl = fitcontrol2,verbose = FALSE)
rffit2
svmfit2
gbmfit2 <- train(Volume ~ ., data = training, method = "gbm", metric = "Rsquared", trControl = fitcontrol2,verbose = FALSE)
gbmfit2
gbmfit <- train(Volume ~ ., data = training, method = "gbm", metric = "Rsquared", trControl = fitcontrol1,verbose = FALSE)
warnings
gbmfit <- train(Volume ~ ., data = training, method = "gbm", metric = "Rsquared", trControl = fitcontrol1,verbose = FALSE)
warnings()
gbmfit2 <- train(Volume ~ ., data = training, method = "gbm", metric = "Rsquared", trControl = fitcontrol2, verbose = FALSE)
gbmfit2 <- train(Volume ~ ., data = training, method = "gbm", trControl = fitcontrol2, verbose = FALSE)
gbmfit2
gbmfit2 <- train(Volume ~ ., data = training, method = "gbm", metric = "Rsquared", trControl = fitcontrol2, verbose = FALSE)
gbmfit2
remove(gbmfit2)
training
gbmfit_2 <- train(Volume ~ ., data = training, method = "gbm", metric = "Rsquared", trControl = fitcontrol2)
gbmfit_2
gbmfit_2
gbmfit_2
save.image()
library(caret)
library(randomForest)
library(e1071)
library(corrplot)
library(gbm)
set.seed(123)
fitcontrol2 <- trainControl(method = "repeatedcv", number = 3, repeats = 10)
gbmfit_2 <- train(Volume ~ ., data = training, method = "gbm", metric = "Rsquared", trControl = fitcontrol2)
View(training)
View(training)
library(gbm)
gbmfit_2 <- train(Volume ~ ., data = training, method = "gbm", metric = "Rsquared", trControl = fitcontrol2)
warnings()
testPred_rf1 <- predict(rffit, newdata = testing)
testPred_rf2 <- predict(rffit2, newdata = testing)
testPred_svm1 <- predict(svmfit, newdata = testing)
testPred_svm2 <- predict(svmfit2, newdata = testing)
testPred_gbm <- predict(gbmfit, newdata = testing)
summary(testPred_rf1)
summary(testPred_rf2)
summary(testPred_svm1)
summary(testPred_svm2)
summary(testPred_gbm)
postResample(testPred_rf2, testing$Volume)
postResample(testPred_rf1, testing$Volume)
plot(testPred_rf2, testing$Volume)
dir()
read.csv("newproductattributes2017.csv")
new_prod <- read.csv("newproductattributes2017.csv")
remove(output)
new_prod_workfile <- new_prod
str(new_prod_workfile)
View(corrData)
View(corrData)
dummy_New_prod <- dummyVars(" ~ .", data = new_prod_workfile)
#dummify data - step 2
ready_Data_newprod <- data.frame(predict(dummy_New_prod, newdata = new_prod_workfile))
ready_Data_newprod$BestSellersRank <- NULL
FinalPred_rf2 <- predict(rffit, newdata = ready_Data_newprod)
FinalPred_rf1 <- predict(rffit2, newdata = ready_Data_newprod)
summary(FinalPred_rf2)
summary(FinalPred_rf1)
save.image()
FinalPred_rf1
View(exist_prod_workfile)
View(exist_prod_workfile)
View(new_prod_workfile)
View(new_prod_workfile)
project_output <- new_prod_workfile
#add predicts to output file
project_output$Predictions_Volume <- FinalPred_rf2
project_output
View(project_output)
View(project_output)
round(project_output$Predictions_Volume,0)
project_output <- new_prod_workfile
#add predicts to output file
project_output$Predictions_Volume <- FinalPred_rf2
help(round)
#export
write.csv(project_output,file = "C2T3_new_prod_predictions.csv", row.names = TRUE)
View(project_output)
View(project_output)
save.image()
library(caret)
library(randomForest)
library(e1071)
library(corrplot)
library(gbm)
View(corrData)
View(corrData)
corrData <- cor(ready_Data)
corrplot(corrData)
ready_Data$ProductNum <- NULL
set.seed(123)
LinearModel <- lm(Volume~., data = ready_Data)
summary(LinearModel)
set.seed(123)
trainSize <- createDataPartition(ready_Data$Volume, p = .75, list = FALSE)
training <- ready_Data[trainSize,]
testing <- ready_Data[-trainSize,]
fitcontrol1 <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
#models with 10 folds
rffit <- train(Volume ~ .,  data = training, method = "rf", metric = "Rsquared", trControl = fitcontrol1)
svmfit <- train(Volume ~ ., data = training, method = "svmLinear2", metric = "Rsquared", trControl = fitcontrol1)
gbmfit <- train(Volume ~ ., data = training, method = "gbm", metric = "Rsquared", trControl = fitcontrol1,verbose = FALSE)
rrfit
summary(rffit)
rffit
svmfit
gbmfit
svmfit_noscale <- train(Volume ~ ., data = training, method = "svmLinear2", metric = "Rsquared", trControl = fitcontrol1, scale = FALSE)
svmfit_noscale
testPred_rf1 <- predict(rffit, newdata = testing)
testPred_svm1 <- predict(svmfit, newdata = testing)
testPred_gbm <- predict(gbmfit, newdata = testing)
summary(testPred_rf1)
summary(testPred_svm1)
summary(testPred_gbm)
postResample(testPred_rf1, testing$Volume)
testPred_rf1 <- predict(rffit, newdata = testing)
summary(testPred_rf1)
postResample(testPred_rf1, testing$Volume)
ready_Data$ProductNum <- exist_prod_workfile$ProductNum
View(ready_Data)
View(ready_Data)
LinearModel <- lm(Volume~., data = ready_Data)
summary(LinearModel)
trainSize <- createDataPartition(ready_Data$Volume, p = .75, list = FALSE)
training <- ready_Data[trainSize,]
testing <- ready_Data[-trainSize,]
rffit <- train(Volume ~ .,  data = training, method = "rf", metric = "Rsquared", trControl = fitcontrol1)
svmfit <- train(Volume ~ ., data = training, method = "svmLinear2", metric = "Rsquared", trControl = fitcontrol1)
gbmfit <- train(Volume ~ ., data = training, method = "gbm", metric = "Rsquared", trControl = fitcontrol1,verbose = FALSE)
#svm generated errors based on scaling, as such I added "scale = False" to the train function. No errors were noted
#but the model was overfitted if scaling was disabled.
svmfit_noscale <- train(Volume ~ ., data = training, method = "svmLinear2", metric = "Rsquared", trControl = fitcontrol1, scale = FALSE)
rffit
svmfit
gbmfit
testPred_rf1 <- predict(rffit, newdata = testing)
testPred_svm1 <- predict(svmfit, newdata = testing)
testPred_gbm <- predict(gbmfit, newdata = testing)
summary(testPred_rf1)
summary(testPred_svm1)
summary(testPred_gbm)
ready_Data$x5StarReviews <- NULL
LinearModel <- lm(Volume~., data = ready_Data)
summary(LinearModel)
trainSize <- createDataPartition(ready_Data$Volume, p = .75, list = FALSE)
training <- ready_Data[trainSize,]
testing <- ready_Data[-trainSize,]
rffit <- train(Volume ~ .,  data = training, method = "rf", metric = "Rsquared", trControl = fitcontrol1)
svmfit <- train(Volume ~ ., data = training, method = "svmLinear2", metric = "Rsquared", trControl = fitcontrol1)
gbmfit <- train(Volume ~ ., data = training, method = "gbm", metric = "Rsquared", trControl = fitcontrol1,verbose = FALSE)
#svm generated errors based on scaling, as such I added "scale = False" to the train function. No errors were noted
#but the model was overfitted if scaling was disabled.
svmfit_noscale <- train(Volume ~ ., data = training, method = "svmLinear2", metric = "Rsquared", trControl = fitcontrol1, scale = FALSE)
rffit
svmfit
gbmfit
svmfit_noscale
testPred_rf1 <- predict(rffit, newdata = testing)
testPred_svm1 <- predict(svmfit, newdata = testing)
testPred_gbm <- predict(gbmfit, newdata = testing)
testPred_svm_noscale <- predict(svmfit_noscale, newdata = testing)
summary(testPred_rf1)
summary(testPred_svm1)
summary(testPred_gbm)
summary(testPred_svm_noscale)
#prediction metrics on test data
postResample(testPred_rf1, testing$Volume)
rffit5 <- train(Volume ~ .,  data = training, method = "rf", metric = "Rsquared", trControl = fitcontrol1, tunelength = 5)
rffit5
rffit5 <- train(Volume ~ .,  data = training, method = "rf", metric = "Rsquared", trControl = fitcontrol1, tuneLength = 5)
rffit5
ready_Data_newprod$x5StarReviews <- NULL
FinalPred_rf1 <- predict(rffit, newdata = ready_Data_newprod)
summary(FinalPred_rf1)
#create output file
project_output <- new_prod_workfile
#add predicts to output file
project_output$Predictions_Volume <- FinalPred_rf1
#export
write.csv(project_output,file = "C2T3_new_prod_predictions.csv", row.names = TRUE)
View(project_output)
View(project_output)
View(exist_prod_workfile)
View(ready_Data)
View(ready_Data)
save.image()
library(caret)
library(randomForest)
library(e1071)
library(corrplot)
library(gbm)
svmfit <- train(Volume ~ ., data = training, method = "svmLinear2", metric = "Rsquared", trControl = fitcontrol1)
warnings()
confusionMatrix(rffit)
postResample(testPred_rf1, testing$Volume)
corrData <- cor(ready_Data)
corrplot(corrData)
remove(itcontrol, rffit5, fitcontrol2, rffit2, svmfit2, FinalPred_rf2, testPred_rf2, testPred_svm2)
save.image()
fn_check_packages <- function(pkg) {
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = T)
sapply(pkg, require, character.only = T)
}
packages <- c("data.table","doParallel", "caret", "randomForest", "e1071", "corrplot", "gbm")
packages <- c("doParallel", "caret", "randomForest", "e1071", "corrplot", "gbm")
fn_check_packages(packages)
#show corr matrix heat map - requires corrplot package
corrplot(corrData)
library(caret)
library(randomForest)
library(e1071)
library(corrplot)
library(gbm)
corrplot(corrData)
#show corr matrix heat map - requires corrplot package
corrplot(corrData, shape = 'circle', type = 'lower', srt = 0.001)
save.image()
#show corr matrix heat map - requires corrplot package
corrplot(corrData, method = 'circle', type = 'lower', srt = 0.001)
save.image()
model_summary <- resamples(list(randomForest = rffit, SVM = svmfit, GrandientBoostedMachines = gbmfit),metric = c('Accuracy','Kappa') ,decreasing=T)
model_dotplot <- dotplot(model_summary, metric = c('Accuracy','Kappa'), ylab = 'Classifier Method')
model_summary <- resamples(list(randomForest = rffit, SVM = svmfit, GrandientBoostedMachines = gbmfit))
model_dotplot <- dotplot(model_summary, metric = c('Accuracy','Kappa'), ylab = 'Classifier Method')
model_summary
summary(model_summary)
model_summary$values
model_summary <- resamples(list(randomForest = rffit, SVM = svmfit, GrandientBoostedMachines = gbmfit),metric = c('Rsquared','RMSE') ,decreasing=T)
model_dotplot <- dotplot(model_summary, metric = c('Rsquared','RMSE'), ylab = 'Classifier Method')
model_do
model_dotplot
model_summary <- resamples(list(randomForest = rffit, SVM = svmfit, GrandientBoostedMachines = gbmfit),metric = 'Rsquared' ,decreasing=T)
model_dotplot <- dotplot(model_summary, metric = 'Rsquared', ylab = 'Classifier Method')
model_dotplot
save.image()
