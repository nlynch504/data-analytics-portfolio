library(doParallel)
detectCores()
cl <- makeCluster(4)
# Register cluster
registerDoParallel(cl)
# Find out how many cores are being used
getDoParWorkers()
stopCluster(cl)
install.packages("arules")
install.packages("arulesViz")
library(arulesViz)
patterns = random.patterns(nItems = 1000)
summary(patterns)
trans = random.transactions(nItems = 1000, nTrans = 1000, method = "agrawal",  patterns = patterns)
image(trans)
help(confusioMatrix)
??arules
??arulesViz
dir()
Trans <- read.transactions("ElectronidexTransactions2017.csv", format = c("basket"), sep = "," , cols = NULL)
View(Trans)
View(Trans)
Trans <- read.transactions("ElectronidexTransactions2017.csv", format = "basket", sep = "," , cols = NULL)
inspect(Trans)
length(Trans)
size(Trans)
inspect(Trans, 9506)
inspect(Trans[9506])
Trans <- read.transactions("ElectronidexTransactions2017.csv", format = "basket", sep = "," , cols = NULL)
head(Trans)
inspect(Trans[1])
inspect(Trans[0:10])
summary(Trans)
inspect(Trans[8707])
Trans <- read.transactions("ElectronidexTransactions2017.csv", format = "basket", sep = "," , cols = NULL)
Trans <- read.transactions("ElectronidexTransactions2017.csv", format = "basket", sep = "," , cols = NULL, rm.duplicates = FALSE)
Trans <- read.transactions("ElectronidexTransactions2017.csv", format = "basket", sep = "," , cols = NULL)
summary(Trans)
remove(Trans)
remove(trans)
Trans <- read.transactions("ElectronidexTransactions2017.csv", format = "basket", sep = "," , cols = NULL)
summary(Trans)
save.image()
remove(Trans)
Trans <- read.transactions("ElectronidexTransactions2017.csv", format = "basket", sep = "," , cols = NULL)
summary(Trans)
library(arules)
library(arulesViz)
length (Trans)
size (Trans)
LIST(Trans)
Trans <- read.transactions("ElectronidexTransactions2017.csv", format = "basket", sep = "," , cols = NULL, rm.duplicates = TRUE)
Trans <- read.transactions("ElectronidexTransactions2017.csv", format = "basket", sep = "," , cols = NULL)
Trans <- read.transactions("ElectronidexTransactions2017.csv", format = "basket", sep = "," , cols = NULL, rm.duplicates = TRUE)
remove(Trans)
Trans <- read.transactions("ElectronidexTransactions2017.csv", format = "basket", sep = "," , cols = NULL, rm.duplicates = TRUE)
length (Trans)
size (Trans)
LIST(Trans)
itemLabels(Trans)
summary(Trans)
itemFrequencyPlot(Trans)
??itemFrequencyPlot()
??itemFrequencyPlot
??arules:itemFrequencyPlot
???itemFrequencyPlot
itemFrequencyPlot(Trans, topN = 10)
remove(patterns)
itemFrequencyPlot(Trans, topN = 10, type = "absolute")
itemFrequencyPlot(Trans, topN = 10, type = "absolute", population = Trans)
itemFrequencyPlot(Trans, topN = 10, type = "absolute", name = "Trans Item Distribution")
itemFrequencyPlot(Trans, topN = 10, type = "absolute", name = "Trans Item Distribution")
#item distribution
itemFrequencyPlot(Trans, topN = 10, type = "absolute", names = "Trans Item Distribution")
itemFrequencyPlot(Trans, topN = 10, type = "absolute", names = TRUE)
itemFrequencyPlot(Trans, topN = 10, type = "absolute", lift = TRUE)
itemFrequencyPlot(Trans, topN = 10, type = "absolute", lift = TRUE, population = Trans)
itemFrequencyPlot(Trans, topN = 10, type = "absolute")
summary(Trans)
itemFrequencyPlot(Trans, topN = 10, type = "absolute", horiz = TRUE)
itemFrequencyPlot(Trans, topN = 10, type = "absolute")
itemFrequencyPlot(Trans, topN = 10, type = "absolute", xlab = "Top 10 Products", ylab = "Frequency")
itemFrequencyPlot(Trans, topN = 10, type = "absolute", xlab = "Top 10 Products", ylab = "Frequency", support = .2, lift = TRUE)
itemFrequencyPlot(Trans, topN = 10, type = "absolute", xlab = "Top 10 Products", ylab = "Frequency", support = .2, lift = TRUE, population = Trans)
image(Trans)
image(Trans[1:50])
image(sample(Trans,30)) # plot 30 trans
orignial_tran <- Trans
image(sample(Trans, 5000))
image(sample(Trans, 1000))
image(sample(Trans, 500))
image(sample(Trans, 300))
image(sample(Trans, 200))
image(sample(Trans, 100))
itemFrequencyPlot(Trans, topN = 10, type = "absolute", xlab = "Top 10 Products", ylab = "Frequency")
#Apriori models - create rule associations
Tunnel_Snakes_Rules <- apriori(Trans, parameter = list(supp = 0.1, conf = 0.8))
inspect(Tunnel_Snakes_Rules)
Tunnel_Snakes_Rules <- apriori(Trans, parameter = list(supp = 0.2, conf = 0.8))
Tunnel_Snakes_Rules <- apriori(Trans, parameter = list(supp = 0.5, conf = 0.8))
inspect(Tunnel_Snakes_Rules)
Tunnel_Snakes_Rules <- apriori(Trans, parameter = list(supp = 0.5, conf = 0.7))
Tunnel_Snakes_Rules <- apriori(Trans, parameter = list(supp = 0.5, conf = 0.7, smax = 10))
Tunnel_Snakes_Rules <- apriori(Trans, parameter = list(supp = 0.2, conf = 0.7))
Tunnel_Snakes_Rules <- apriori(Trans, parameter = list(supp = 0.2, conf = 0.7, minlen = 2))
Tunnel_Snakes_Rules <- apriori(Trans, parameter = list(supp = 0.2, conf = 0.7, minlen = 3))
Tunnel_Snakes_Rules <- apriori(Trans, parameter = list(supp = 0.2, conf = 0.7, minlen = 4))
Tunnel_Snakes_Rules <- apriori(Trans, parameter = list(supp = 0.2, conf = 0.5, minlen = 2))
Tunnel_Snakes_Rules <- apriori(Trans, parameter = list(supp = 0.1, conf = 0.5, minlen = 2))
Tunnel_Snakes_Rules <- apriori(Trans, parameter = list(supp = 0.2, conf = 0.4, minlen = 2))
summary(Trans)
Tunnel_Snakes_Rules <- apriori(Trans, parameter = list(supp = 0.1, conf = 0.8, minlen = 2, maxlen = 30))
Tunnel_Snakes_Rules <- apriori(Trans, parameter = list(supp = 0.1, conf = 0.8, maxtime = 0, minlen = 2, maxlen = 30))
Tunnel_Snakes_Rules <- apriori(Trans, parameter = list(supp = 0.2, conf = 0.5, maxtime = 0, minlen = 2, maxlen = 30))
#Apriori models - create rule associations
Tunnel_Snakes_Rules <- apriori(Trans, parameter = list(supp = 0.1, conf = 0.5, maxtime = 0, minlen = 2, maxlen = 30))
#Apriori models - create rule associations
Tunnel_Snakes_Rules <- apriori(Trans, parameter = list(supp = 0.1, conf = NA, maxtime = 0, minlen = 2, maxlen = 30))
Tunnel_Snakes_Rules <- apriori(Trans, parameter = list(supp = 0.1, conf = , maxtime = 0, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.1, conf = .4, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.1, conf = .3, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.1, conf = .2, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.2, conf = .6, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.05, conf = .6, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.05, conf = .25, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.05, conf = .30, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.05, conf = .20, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.10, conf = .20, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.05, conf = .20, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.05, conf = .25, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.03, conf = .25, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.05, conf = .20, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.06, conf = .18, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.05, conf = .20, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.05, conf = .80, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.05, conf = .60, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.05, conf = .30, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.04, conf = .20, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.045, conf = .20, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
ap_8 <- apriori(Trans, parameter = list(supp = 0.05, conf = .20, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
#returned 18 rules
ap_18 <- apriori(Trans, parameter = list(supp = 0.045, conf = .20, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
ap_13 <- apriori(Trans, parameter = list(supp = 0.045, conf = .20, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
ap_18 <- apriori(Trans, parameter = list(supp = 0.04, conf = .20, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.04, conf = .60, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.04, conf = .50, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.02, conf = .50, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
summary(Trans)
apriori(Trans, parameter = list(supp = 0.02, conf = .50, maxtime = 60, minlen = 2, maxlen = 21, target = "rules"))
apriori(Trans, parameter = list(supp = 0.045, conf = .20, maxtime = 60, minlen = 2, maxlen = 21, target = "rules"))
summary(ap_13)
inspect(ap_13)
inspect(ap_18)
apriori(Trans, parameter = list(supp = 0.04, conf = .20, maxtime = 60, minlen = 1, maxlen = 30, target = "rules"))
ap_19_1 <- apriori(Trans, parameter = list(supp = 0.04, conf = .20, maxtime = 60, minlen = 1, maxlen = 30, target = "rules"))
inspect(ap_18_1)
inspect(ap_19_1)
inspect(ap_18)
inspect(ap_13)
inspect(ap_18[1:5])
itemFrequencyPlot(Trans, topN = 10, type = "absolute", xlab = "Top 10 Products", ylab = "Frequency")
inspect(ap_18[1:5], sort(decreasing = TRUE))
remove(ap_19_1)
save.image()
inspect(sort(ap_18, by = confin))
inspect(sort(ap_18, by = "confidence"))
inspect(head(sort(ap_18, by = "lift"),4))
s_rules_10 <- inspect(head(sort(ap_18, by = "lift"),10))
s_rules_14 <- inspect(head(sort(ap_18, by = "lift"),14))
save.image()
plot(ap_18)
graph <- plot(ap_18, measure=c("support","lift"), shading="confidence");
t_graph plot(ap_18, shading="order", control=list(main ="Two-key plot"))
t_graph <- plot(ap_18, shading="order", control=list(main ="Two-key plot"))
i_graph <- plot(ap_18, measure=c("support","lift"), shading="confidence", interactive = TRUE)
Imac_rules <- subset(ap_18, subset=lhs %in% "IMac")
Imac_rules <- subset(ap_18, subset=lhs %in% {iMac})
Imac_rules <- subset(ap_18, subset=lhs %in% "iMac")
Imac_rules
inspect(Imac_rules)
right_Imac_rules <- subset(ap_18, subset= rhs %in% "iMac")
inspect(right_Imac_rules)
right_Imac_rules_1 <- subset(ap_18, subset= rhs %in% "iMac" & confidence > 0.38)
inspect(right_Imac_rules_1)
is.redundant(ap_18)
apriori(Trans, parameter = list(supp = 0.005, conf = .80, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.002, conf = .80, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
ap_28 <-apriori(Trans, parameter = list(supp = 0.002, conf = .80, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
inspect(ap_28)
apriori(Trans, parameter = list(supp = 0.004, conf = .80, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
is.redundant(ap_28)
apriori(Trans, parameter = list(supp = 0.0025, conf = .80, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
ap_6 <- apriori(Trans, parameter = list(supp = 0.0025, conf = .80, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
inspect(ap_6)
apriori(Trans, parameter = list(supp = 0.0025, conf = .75, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
ap_28
inspect <- ap_28
inspect(ap_28)
inspect(sort(ap_28), by = "lift")
apriori(Trans, parameter = list(supp = 0.002, conf = .80, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
apriori(Trans, parameter = list(supp = 0.0015, conf = .80, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
ap_111 <- apriori(Trans, parameter = list(supp = 0.0015, conf = .80, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
is.redundant(ap_111)
subset.matrix <- is.subset(ap_111, ap_111)
subset.matrix[lower.tri(subset.matrix,diag = T)] <- NA
redudant <- colSums(subset.matrix, na.rm =T) >=1
which(redudant)
#remove redudancies
rules.pruned <- ap_111[!redudant]
inspect(rules.pruned)
is.redundant(rules.pruned)
inspect(rules.pruned)
View(rules.pruned)
View(rules.pruned)
ap_111
inspect(ap_111)
inspect(rules.pruned)
subset.matrix <- is.subset(ap_111, ap_111)
subset.matrix[lower.tri(subset.matrix,diag = T)] <- NA
subset.matrix[lower.tri(subset.matrix, diag = TRUE)] <- NA
redudant <- colSums(subset.matrix, na.rm =T) >= 1
which(redudant)
subset.matrix[lower.tri(subset.matrix, diag = TRUE)] <- NA
subset.matrix[lower.tri(subset.matrix, diag = T)] <- NA
subset.matrix[lower.tri(subset.matrix, diag = T)] <- T
redudant <- colSums(subset.matrix, na.rm =T) >= 1
which(redudant)
subset.matrix[lower.tri(subset.matrix, diag = T)] <- NULL
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant)
rules.pruned <- rules.sorted[!redundant]
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant)
subset.matrix <- is.subset(ap_111, ap_111)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redudant <- colSums(subset.matrix, na.rm =T) >= 1
which(redudant)
is.redundant(ap_111)
subsetRules <- which(colSums(is.subset(ap_111, ap_111)) > 1) # get subset rules in vector
length(subsetRules)  #> 3913
subsetRules <- which(colSums(is.subset(ap_111, ap_111)) > 1)
summary(is.redundant(ap_111))
remove(subsetRules)
subset.matrix
subset.matrix <- is.subset(ap_111, ap_111)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant)
subset.matrix <- is.subset(ap_111, ap_111)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redundant <- colSums(subset.matrix, na.rm=T) > 1
which(redundant)
inspect(ap_111[is.redundant(ap_111)])
inspect(ap_111[!is.redundant(ap_111)])
rules_pruned <- ap_111[!is.redundant(ap_111)]
summary(rules_pruned)
save.image()
Trans_1 <- read.transactions("ElectronidexTransactions2017.csv", format = "basket", sep = "," , cols = NULL, rm.duplicates = TRUE)
Trans_2 <- read.transactions("ElectronidexTransactions2017.csv", format = "basket", sep = "," , cols = NULL, rm.duplicates = TRUE)
View(Trans_1)
View(Trans_2)
View(Trans_2)
Trans <- read.transactions("ElectronidexTransactions2017.csv", format = "basket", sep = "," , cols = NULL, rm.duplicates = FALSE)
Tunnel_Snakes_Rules <- apriori(Trans, parameter = list(supp = 0.5, conf = 0.8))
#inspect rules
inspect(Tunnel_Snakes_Rules)
#Apriori models - create rule associations; returned 8 rules
ap_8 <- apriori(Trans, parameter = list(supp = 0.05, conf = .20, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
#returned 13 rules
ap_13 <- apriori(Trans, parameter = list(supp = 0.045, conf = .20, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
#returned 18 rules <- chosen ;
ap_18 <- apriori(Trans, parameter = list(supp = 0.04, conf = .20, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
ap_24 <- apriori(Trans, parameter = list(supp = 0.0025, conf = .75, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
ap_28 <-apriori(Trans, parameter = list(supp = 0.002, conf = .80, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
ap_111 <- apriori(Trans, parameter = list(supp = 0.0015, conf = .80, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
library(arules)
library(arulesViz)
Trans <- read.transactions("ElectronidexTransactions2017.csv", format = "basket", sep = "," , cols = NULL, rm.duplicates = FALSE)
#its the same false or true for rm.duplicate
summary(Trans) # give a numeric output for top items and shows blank rows if any
#item distribution
itemFrequencyPlot(Trans, topN = 10, type = "absolute", xlab = "Top 10 Products", ylab = "Frequency")
# type can be absoulte or relative. Relative gives %ages, which Ithink is more helpful
#Apriori models - create rule associations
Tunnel_Snakes_Rules <- apriori(Trans, parameter = list(supp = 0.5, conf = 0.8))
#inspect rules
inspect(Tunnel_Snakes_Rules)
#Apriori models - create rule associations; returned 8 rules
ap_8 <- apriori(Trans, parameter = list(supp = 0.05, conf = .20, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
#returned 13 rules
ap_13 <- apriori(Trans, parameter = list(supp = 0.045, conf = .20, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
#returned 18 rules <- chosen ;
ap_18 <- apriori(Trans, parameter = list(supp = 0.04, conf = .20, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
ap_24 <- apriori(Trans, parameter = list(supp = 0.0025, conf = .75, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
ap_28 <-apriori(Trans, parameter = list(supp = 0.002, conf = .80, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
ap_111 <- apriori(Trans, parameter = list(supp = 0.0015, conf = .80, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))
remove([Trans_1,Trans_2])
remove(Trans_1,Trans_2)
# display rules with imac in right side
right_Imac_rules <- subset(ap_18, subset= rhs %in% "iMac")
