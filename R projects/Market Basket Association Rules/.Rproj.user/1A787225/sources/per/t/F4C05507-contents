library(arules)
library(arulesViz)

#read transacation data as lists instead of variables ==> use read.Transactions instead of read.csv, removed 2 blank rows prior to upload
Trans <- read.transactions("ElectronidexTransactions2017.csv", format = "basket", sep = "," , cols = NULL, rm.duplicates = FALSE)
#its the same false or true for rm.duplicate 

summary(Trans) # give a numeric output for top items and shows blank rows if any 

#item distribution
itemFrequencyPlot(Trans, topN = 10, type = "absolute", xlab = "Top 10 Products", ylab = "Frequency")
# type can be absoulte or relative. Relative gives %ages, which Ithink is more helpful

#Apriori models - create rule associations 
Tunnel_Snakes_Rules <- apriori(Trans, parameter = list(supp = 0.5, conf = 0.8))

#inspect rules 
inspect(Tunnel_Snakes_Rules)

#Apriori models - create rule associations; returned 8 rules
ap_8 <- apriori(Trans, parameter = list(supp = 0.05, conf = .20, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))

#returned 13 rules 
ap_13 <- apriori(Trans, parameter = list(supp = 0.045, conf = .20, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))

#returned 18 rules <- chosen ; 
ap_18 <- apriori(Trans, parameter = list(supp = 0.04, conf = .20, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))

ap_24 <- apriori(Trans, parameter = list(supp = 0.0025, conf = .75, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))

ap_28 <-apriori(Trans, parameter = list(supp = 0.002, conf = .80, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))

ap_111 <- apriori(Trans, parameter = list(supp = 0.0015, conf = .80, maxtime = 60, minlen = 2, maxlen = 30, target = "rules"))


#sorted rules (sorted by lift, life = importance of a rule )
s_rules_14 <- inspect(head(sort(ap_18, by = "lift"),14))

#graph
graph <- plot(ap_18, measure=c("support","lift"), shading="confidence")

#interactive graph
i_graph <- plot(ap_18, measure=c("support","lift"), shading="confidence", interactive = TRUE)

# display rules with imac in left side
left_Imac_rules <- subset(ap_18, subset=lhs %in% "iMac")

# display rules with imac in right side
right_Imac_rules <- subset(ap_18, subset= rhs %in% "iMac")

#remove redundant rules ==> no repeat rules for ap_111
is.redundant(ap_111)

summary(is.redundant(ap_111)) #counts T/F

#easier way to prune rues

inspect(ap_111[is.redundant(ap_111)]) #view redundant
inspect(ap_111[!is.redundant(ap_111)]) #view non-redudant
rules_pruned <- ap_111[!is.redundant(ap_111)] #keep non-red rules
summary(rules_pruned) #checksum for errors 


