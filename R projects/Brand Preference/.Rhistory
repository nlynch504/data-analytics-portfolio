testPredLM <- predict(LMFit, testing)
postResample(testPredLM,testing$brand)
""" LM output for test data
RMSE  Rsquared       MAE
0.4769550 0.0361493 0.4526926
"""
#ploted data
plot(testPredLM,testing$brand)
#labeled data
plot(testPredLM,testing$brand, xlab="Predicted Value",ylab = "Actual Value")
#use prediction on new data
#y variable <- survey_workfile$brand
#get datatypes
#str(df)
#set seed for reproduction
set.seed(123)
#change column name
colnames(survey_workfile)[colnames(survey_workfile) == 'elevel'] <- 'education'
colnames(survey_workfile)[colnames(survey_workfile) == 'zipcode'] <- 'region'
#chg data type
survey_workfile$education <- as.factor(survey_workfile$education)
survey_workfile$car <- as.factor(survey_workfile$car)
survey_workfile$region <- as.factor(survey_workfile$region)
#make data paritions
intraining <- createDataPartition(survey_workfile$brand,p=.75,list = FALSE)
training <- survey_workfile[intraining,]
testing <- survey_workfile[-intraining,]
#10 fold cross validation
fitcontrol <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
#lm model
LMFit <- train(brand ~ .,data = training, method = "lm",trControl = fitcontrol)
#LMFit output for training data
#Linear Regression
#7500 samples
#   6 predictor
#No pre-processing
#Resampling: Cross-Validated (10 fold, repeated 10 times)
#Summary of sample sizes: 6750, 6750, 6750, 6750, 6750, 6750, ...
#Resampling results:
#  RMSE       Rsquared    MAE
#  0.4753741  0.03968519  0.4497534
#Tuning parameter 'intercept' was held constant at a value of TRUE
#make predictions
testPredLM <- predict(LMFit, testing)
postResample(testPredLM,testing$brand)
#LM output for test data
#   RMSE  Rsquared       MAE
#0.4769550 0.0361493 0.4526926
#ploted data
plot(testPredLM,testing$brand)
#labeled data
plot(testPredLM,testing$brand, xlab="Predicted Value",ylab = "Actual Value")
#use prediction on new data
#y variable <- survey_workfile$brand
#get datatypes
#str(df)
#set seed for reproduction
set.seed(123)
#change column name
colnames(survey_workfile)[colnames(survey_workfile) == 'elevel'] <- 'education'
colnames(survey_workfile)[colnames(survey_workfile) == 'zipcode'] <- 'region'
#chg data type
survey_workfile$education <- as.factor(survey_workfile$education)
survey_workfile$car <- as.factor(survey_workfile$car)
survey_workfile$region <- as.factor(survey_workfile$region)
#make data paritions
intraining <- createDataPartition(survey_workfile$brand,p=.75,list = FALSE)
training <- survey_workfile[intraining,]
testing <- survey_workfile[-intraining,]
#10 fold cross validation
fitcontrol <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
#lm model
LMFit <- train(brand ~ .,data = training, method = "lm",trControl = fitcontrol)
LMFit
#LMFit output for training data
#Linear Regression
#7500 samples
#   6 predictor
#No pre-processing
#Resampling: Cross-Validated (10 fold, repeated 10 times)
#Summary of sample sizes: 6750, 6750, 6750, 6750, 6750, 6750, ...
#Resampling results:
#  RMSE       Rsquared    MAE
#  0.4753741  0.03968519  0.4497534
#Tuning parameter 'intercept' was held constant at a value of TRUE
#make predictions
testPredLM <- predict(LMFit, testing)
postResample(testPredLM,testing$brand)
#LM output for test data
#   RMSE  Rsquared       MAE
#0.4769550 0.0361493 0.4526926
#ploted data
plot(testPredLM,testing$brand)
#labeled data
plot(testPredLM,testing$brand, xlab="Predicted Value",ylab = "Actual Value")
#use prediction on new data
#y variable <- survey_workfile$brand
#get datatypes
#str(df)
#set seed for reproduction
set.seed(123)
#change column name
colnames(survey_workfile)[colnames(survey_workfile) == 'elevel'] <- 'education'
colnames(survey_workfile)[colnames(survey_workfile) == 'zipcode'] <- 'region'
#chg data type
survey_workfile$education <- as.factor(survey_workfile$education)
survey_workfile$car <- as.factor(survey_workfile$car)
survey_workfile$region <- as.factor(survey_workfile$region)
survey_workfile$brand <- as.factor(survey_workfile$brand)
#make data paritions
intraining <- createDataPartition(survey_workfile$brand,p=.75,list = FALSE)
training <- survey_workfile[intraining,]
testing <- survey_workfile[-intraining,]
#10 fold cross validation
fitcontrol <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
#lm model
LMFit <- train(brand ~ .,data = training, method = "lm",trControl = fitcontrol)
LMFit
#LMFit output for training data
#Linear Regression
#7500 samples
#   6 predictor
#No pre-processing
#Resampling: Cross-Validated (10 fold, repeated 10 times)
#Summary of sample sizes: 6750, 6750, 6750, 6750, 6750, 6750, ...
#Resampling results:
#  RMSE       Rsquared    MAE
#  0.4770998  0.03583014  0.4527655
#Tuning parameter 'intercept' was held constant at a value of TRUE
#make predictions
testPredLM <- predict(LMFit, testing)
postResample(testPredLM,testing$brand)
#LM output for test data
#   RMSE  Rsquared       MAE
# 0.47320290 0.04283785 0.44852906
#ploted data
plot(testPredLM,testing$brand)
#labeled data
plot(testPredLM,testing$brand, xlab="Predicted Value",ylab = "Actual Value")
#use prediction on new data
View(survey_workfile)
View(training)
#y variable <- survey_workfile$brand
#get datatypes
#str(df)
#set seed for reproduction
set.seed(123)
#change column name
colnames(survey_workfile)[colnames(survey_workfile) == 'elevel'] <- 'education'
colnames(survey_workfile)[colnames(survey_workfile) == 'zipcode'] <- 'region'
#chg data type
survey_workfile$education <- as.factor(survey_workfile$education)
survey_workfile$car <- as.factor(survey_workfile$car)
survey_workfile$region <- as.factor(survey_workfile$region)
survey_workfile$brand <- as.factor(survey_workfile$brand)
#make data paritions
intraining <- createDataPartition(survey_workfile$brand,p=.75,list = FALSE)
training <- survey_workfile[intraining,]
testing <- survey_workfile[-intraining,]
#10 fold cross validation
fitcontrol <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
#lm model
KNNFit <- train(brand ~ .,data = training, method = "knn",trControl = fitcontrol)
KNNFit
#KNNFit output for training data
#make predictions
testPredKNN <- predict(KNNFit, testing)
postResample(testPredKNN,testing$brand)
#KNN output for test data
#ploted data
plot(testPredKNN,testing$brand)
#labeled data
plot(testPredKNN,testing$brand, xlab="Predicted Value",ylab = "Actual Value")
#use prediction on new data
library(caret)
#y variable <- survey_workfile$brand
#get datatypes
#str(df)
#set seed for reproduction
set.seed(123)
#change column name
colnames(survey_workfile)[colnames(survey_workfile) == 'elevel'] <- 'education'
colnames(survey_workfile)[colnames(survey_workfile) == 'zipcode'] <- 'region'
#chg data type
survey_workfile$education <- as.factor(survey_workfile$education)
survey_workfile$car <- as.factor(survey_workfile$car)
survey_workfile$region <- as.factor(survey_workfile$region)
survey_workfile$brand <- as.factor(survey_workfile$brand)
#make data paritions
intraining <- createDataPartition(survey_workfile$brand,p=.75,list = FALSE)
training <- survey_workfile[intraining,]
testing <- survey_workfile[-intraining,]
#10 fold cross validation
fitcontrol <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
#lm model
KNNFit <- train(brand ~ .,data = training, method = "knn",trControl = fitcontrol)
KNNFit
#KNNFit output for training data
#make predictions
testPredKNN <- predict(KNNFit, testing)
postResample(testPredKNN,testing$brand)
#KNN output for test data
#ploted data
plot(testPredKNN,testing$brand)
#labeled data
plot(testPredKNN,testing$brand, xlab="Predicted Value",ylab = "Actual Value")
#use prediction on new data
#y variable <- survey_workfile$brand
#get datatypes
#str(df)
#set seed for reproduction
set.seed(123)
#change column name
colnames(survey_workfile)[colnames(survey_workfile) == 'elevel'] <- 'education'
colnames(survey_workfile)[colnames(survey_workfile) == 'zipcode'] <- 'region'
#chg data type
survey_workfile$education <- as.factor(survey_workfile$education)
survey_workfile$car <- as.factor(survey_workfile$car)
survey_workfile$region <- as.factor(survey_workfile$region)
survey_workfile$brand <- as.factor(survey_workfile$brand)
#creates the following error on line 34: "Error: wrong model type for classification"
#creates the following error on line 33
#make data paritions
intraining <- createDataPartition(survey_workfile$brand,p=.75,list = FALSE)
training <- survey_workfile[intraining,]
testing <- survey_workfile[-intraining,]
#10 fold cross validation
fitcontrol <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
#lm model
LMFit <- train(brand ~ .,data = training, method = "lm",trControl = fitcontrol)
#Error: wrong model type for classification
LMFit
#LMFit output for training data
#Linear Regression
#7500 samples
#   6 predictor
#No pre-processing
#Resampling: Cross-Validated (10 fold, repeated 10 times)
#Summary of sample sizes: 6750, 6750, 6750, 6750, 6750, 6750, ...
#Resampling results:
#  RMSE       Rsquared    MAE
#  0.4770998  0.03583014  0.4527655
#Tuning parameter 'intercept' was held constant at a value of TRUE
#make predictions
testPredLM <- predict(LMFit, testing)
postResample(testPredLM,testing$brand)
#LM output for test data
#   RMSE  Rsquared       MAE
# 0.47320290 0.04283785 0.44852906
#ploted data
plot(testPredLM,testing$brand)
#labeled data
plot(testPredLM,testing$brand, xlab="Predicted Value",ylab = "Actual Value")
#use prediction on new data
postResample(testPredLM,testing$brand)
View(Survey_initial)
View(Survey_initial)
View(training)
View(training)
savehistory("C:/Users/cube/Desktop/UT data analytics/Week 5/Week 5 - Survey Task/.Rhistory")
save.image()
library(caret)
#y variable <- survey_workfile$brand
#get datatypes
str(survey_workfile)
#set seed for reproduction
set.seed(123)
#change column name
colnames(survey_workfile)[colnames(survey_workfile) == 'elevel'] <- 'education'
colnames(survey_workfile)[colnames(survey_workfile) == 'zipcode'] <- 'region'
#chg data type
survey_workfile$education <- as.factor(survey_workfile$education)
survey_workfile$car <- as.factor(survey_workfile$car)
survey_workfile$region <- as.factor(survey_workfile$region)
survey_workfile$brand <- as.factor(survey_workfile$brand)
#make data paritions
intraining <- createDataPartition(survey_workfile$brand,p=.75,list = FALSE)
training <- survey_workfile[intraining,]
testing <- survey_workfile[-intraining,]
#10 fold cross validation
fitcontrol <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
#lm model
LMFit <- train(brand ~ .,data = training, method = "lm",trControl = fitcontrol)
#Error: wrong model type for classification
LMFit
#make predictions
testPredLM <- predict(LMFit, testing)
postResample(testPredLM,testing$brand)
#ploted data
plot(testPredLM,testing$brand)
#labeled data
plot(testPredLM,testing$brand, xlab="Predicted Value",ylab = "Actual Value")
#use prediction on new data
survey_workfile
training
library(caret)
#y variable <- survey_workfile$brand
#get datatypes
str(survey_workfile)
#set seed for reproduction
set.seed(123)
#change column name
colnames(survey_workfile)[colnames(survey_workfile) == 'elevel'] <- 'education'
colnames(survey_workfile)[colnames(survey_workfile) == 'zipcode'] <- 'region'
#chg data type
survey_workfile$education <- as.factor(survey_workfile$education)
survey_workfile$car <- as.factor(survey_workfile$car)
survey_workfile$region <- as.factor(survey_workfile$region)
survey_workfile$brand <- as.ordered(survey_workfile$brand)
#make data paritions
intraining <- createDataPartition(survey_workfile$brand,p=.75,list = FALSE)
training <- survey_workfile[intraining,]
testing <- survey_workfile[-intraining,]
#10 fold cross validation
fitcontrol <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
#lm model
LMFit <- train(brand ~ .,data = training, method = "lm",trControl = fitcontrol)
#Error: wrong model type for classification
LMFit
#make predictions
testPredLM <- predict(LMFit, testing)
postResample(testPredLM,testing$brand)
#ploted data
plot(testPredLM,testing$brand)
#labeled data
plot(testPredLM,testing$brand, xlab="Predicted Value",ylab = "Actual Value")
#use prediction on new data
#import files
survey_initial <- read.xlsx("Survey_Key_and_Complete_Responses_excel.xlsx,2")
#import libraries
library(xlsx)
library(caret)
library(readr)
survey_initial <- read.xlsx("Survey_Key_and_Complete_Responses_excel.xlsx,2")
#import files
survey_initial <- read.xlsx("Survey_Key_and_Complete_Responses_excel.xlsx",2)
source('C:/Users/cube/Desktop/UT data analytics/Week 5/Week 5 - Survey Task/KNN.R')
#import libraries
library(xlsx)
library(caret)
library(readr)
#import files
survey_initial <- read.xlsx("Survey_Key_and_Complete_Responses_excel.xlsx",2)
#import libraries
library(xlsx)
library(caret)
library(readr)
#import files
survey_initial <- read.xlsx("Survey_Key_and_Complete_Responses_excel.xlsx",2)
survery_workfile <- survey_initial
source('C:/Users/cube/Desktop/UT data analytics/Week 5/Week 5 - Survey Task/KNN.R')
source('C:/Users/cube/Desktop/UT data analytics/Week 5/Week 5 - Survey Task/KNN.R')
install.packages("e1071")
survey_workfile <- survey_initial
survey_workfile
remove(survery_workfile)
source('C:/Users/cube/Desktop/UT data analytics/Week 5/Week 5 - Survey Task/KNN.R')
#get datatypes
str(survey_workfile)
#set seed for reproduction
set.seed(123)
#change column name
colnames(survey_workfile)[colnames(survey_workfile) == 'elevel'] <- 'education'
colnames(survey_workfile)[colnames(survey_workfile) == 'zipcode'] <- 'region'
#chg data type
survey_workfile$education <- as.factor(survey_workfile$education)
survey_workfile$car <- as.factor(survey_workfile$car)
survey_workfile$region <- as.factor(survey_workfile$region)
survey_workfile$brand <- as.factor(survey_workfile$brand)
#make data paritions
intraining <- createDataPartition(survey_workfile$brand,p=.75,list = FALSE)
training <- survey_workfile[intraining,]
testing <- survey_workfile[-intraining,]
#10 fold cross validation
fitcontrol <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
#lm model
KNNFit <- train(brand ~ .,data = training, method = "knn",trControl = fitcontrol)
KNNFit
#KNNFit output for training data
#make predictions
testPredKNN <- predict(KNNFit, testing)
postResample(testPredKNN,testing$brand)
#KNN output for test data
#ploted data
plot(testPredKNN,testing$brand)
#labeled data
plot(testPredKNN,testing$brand, xlab="Predicted Value",ylab = "Actual Value")
source('C:/Users/cube/Desktop/UT data analytics/Week 5/Week 5 - Survey Task/KNN.R')
View(survey_workfile)
View(survey_workfile)
str(survey_workfile)
> plot(testPredKNN,testing$brand, xlab="Predicted Value",ylab = "Actual Value")
plot(testPredKNN,testing$brand, xlab="Predicted Value",ylab = "Actual Value")
plot(testPredKNN,testing$brand)
summary(testing$brand)
plot(testPredKNN,testing$brand, xlab="Predicted Value",ylab = "Actual Value")
plot(testPredKNN,testing$brand, xlab="Actual Value",ylab = "Predicted Value")
source('C:/Users/cube/Desktop/UT data analytics/Week 5/Week 5 - Survey Task/KNN.R')
dir()
incomplete_survey <- read.csv("SurveyIncomplete.csv")
incomplete_survey_workfile <- incomplete_survey
str(incomplete_survey_workfile)
#change column name
colnames(incomplete_survey_workfile)[colnames(incomplete_survey_workfile) == 'elevel'] <- 'education'
colnames(incomplete_survey_workfile)[colnames(incomplete_survey_workfile) == 'zipcode'] <- 'region'
#chg data type
incomplete_survey_workfile$education <- as.factor(incomplete_survey_workfile$education)
incomplete_survey_workfile$car <- as.factor(incomplete_survey_workfile$car)
incomplete_survey_workfile$region <- as.factor(incomplete_survey_workfile$region)
incomplete_survey_workfile$brand <- as.factor(incomplete_survey_workfile$brand)
incomplete_survey_workfile$age <- as.numeric(incomplete_survey_workfile$age)
str(incomplete_survey_workfile)
str(survey_workfile)
source('C:/Users/cube/Desktop/UT data analytics/Week 5/Week 5 - Survey Task/KNN.R')
postResample(testPredKNN,incomplete_survey_workfile$brand)
incomplete_predict <- (KNNFit, incomplete_survey_workfile)
incomplete_predict <- predict(KNNFit, incomplete_survey_workfile)
incomplete_predict <- predict(KNNFit, incomplete_survey_workfile)
incomplete_predict
summary(incomplete_predict)
plot(incomplete_predict)
hist(incomplete_predict)
source('C:/Users/cube/Desktop/UT data analytics/Week 5/Week 5 - Survey Task/KNN.R')
plot(incomplete_predict. xval = "Brand", yval = "count")
plot(incomplete_predict, xval = "Brand", yval = "count")
source('C:/Users/cube/Desktop/UT data analytics/Week 5/Week 5 - Survey Task/KNN.R')
plot(testPredKNN,testing$brand, xlab="Actual Value",ylab = "Predicted Value")
source('C:/Users/cube/Desktop/UT data analytics/Week 5/Week 5 - Survey Task/KNN.R')
plot(incomplete_predict, xlab="Brand",ylab = "Count")
summary(incomplete_predict)
survey_workfile
remove(survey_initial)
View(KNNFit)
remove(testPredLM)
library(xlsx)
library(caret)
library(readr)
library(e1071)
KNNFit <- train(brand ~ .,data = training, method = "knn",trControl = fitcontrol, tuneLength = 5)
KNNFit
gri <- expand.grid(k=c(13,14,15,16,17,18,19,20))
gri
str(gri)
KNNFitTL <- train(brand ~ .,data = training, method = "knn",trControl = fitcontrol,tunegrid=gri)
warning()
confusionMatrix(testing$brand,incomplete_predict)
testPredKNN <- predict(KNNFit, testing)
testPredKNN
confusionMatrix(testPredKNN, testing$brand)
#10 fold cross validation NEEDS TUNING
fitcontrol <- trainControl(method = "repeatedcv", number = 20, repeats = 10)
fitcontrol <- trainControl(method = "repeatedcv", number = 20, repeats = 10)
fitcontrol <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
KNNFit <- train(brand ~ .,data = training, method = "knn",trControl = fitcontrol,tuneLength=10)
KNNFit
save.image()
source('C:/Users/cube/Desktop/UT data analytics/Week 5/Week 5 - Survey Task/KNN.R')
plot(KNNFit)
source('C:/Users/cube/Desktop/UT data analytics/Week 5/Week 5 - Survey Task/KNN.R')
plot(KNNFit, xlab = "K", ylab = "Accuracy")
plot(KNNFit)
plot(KNNFit, xlab = "K", ylab = "Accuracy")
KNNFit
testPredKNN
summary(testPredKNN)
postResample(testPredKNN,testing$brand)
source('C:/Users/cube/Desktop/UT data analytics/Week 5/Week 5 - Survey Task/KNN.R')
str(testing)
plot(testPredKNN,testing$brand, xlab="Actual Value",ylab = "Predicted Value")
summary(testing$brand)
summary(testPredKNN)
confusionMatrix(testPredKNN,testing$brand)
summary(testing$brand)
summary(testPredKNN)
source('C:/Users/cube/Desktop/UT data analytics/Week 5/Week 5 - Survey Task/KNN.R')
help("train")
KNNfitcontrol <- fitcontrol
remove(fitcontrol)
RFfitcontrol <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
RFfitcontrol_cv <- RFfitcontrol
RFfitcontrol_oob <- trainControl(method = "oob", number = 10, repeats = 3)
RFfitcontrol_oob <- trainControl(method = "oob", number = 10)
remove(RFfitcontrol_oob)
RFfitcontrol
remove(RFfitcontrol_cv)
RFFit <- train(brand ~ .,data = training, method = "rf",trControl = fitcontrol,tuneLength=5)
RFFit <- train(brand ~ .,data = training, method = "rf",trControl = rFfitcontrol,tuneLength=5,preProcess("range"))
RFFit <- train(brand ~ .,data = training, method = "rf",trControl = RFfitcontrol,tuneLength=5)
library(randomForest)
RFFit <- train(brand ~ .,data = training, method = "rf",trControl = RFfitcontrol,tuneLength=5)
RFFit <- train(brand ~ .,data = training, method = "rf",trControl = RFfitcontrol,metric = "Accuracy",tuneLength=5)
RFFit
plot(RFFit)
plot(RFFit, xlab = "# of decision trees", ylab = "Model Accuracyy")
plot(RFFit, xlab = "# of decision trees", ylab = "Model Accuracy")
plot(RFFit)
help(mtry)
help(??mtry)
help("??mtry")
plot(RFFit, xlab = "# of mtry", ylab = "Model Accuracy")
source('C:/Users/cube/Desktop/UT data analytics/Week 5/Week 5 - Survey Task/KNN.R')
save.image()
testPredRF <- predict(RFFit, testing)
testPredRF
summary(testPredRF)
confusionMatrix(testPredRF,testing$brand)
postResample(testPredRF,testing$brand)
incomplete_predict_RF <- predict(RFFit, incomplete_survey_workfile)
summary(incomplete_predict_RF)
source('C:/Users/cube/Desktop/UT data analytics/Week 5/Week 5 - Survey Task/KNN.R')
plot(incomplete_predict_RF, xlab="Brand",ylab = "Count")
save.image()
